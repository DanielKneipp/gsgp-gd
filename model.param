# Path to the parent parameter file. The child parameters overwrite the parent
parent = 
# Path for the training/test files. See experiment.sampling option for more details
experiment.data = 
# Output directory
experiment.output.dir = 
# Seed (long int) used by the pseudo-random number generator
experiment.seed = 
# Identifier prefix for files
experiment.file.prefix = 
# List of terminals used to build new trees (separeted by commas)
tree.build.terminals = 
# List of functions used to build new trees (separeted by commas)
tree.build.functions = 
# Fitness function adopted during the evolution
pop.fitness = 
# Builder used to generate trees for the initial population
tree.build.builder = 
# Builder used to generate random trees for the semantic operators
tree.build.builder.random.tree = 
# Type of selector used to select individuals for next generations
pop.ind.selector = 
# Type of experiment (cross-validation or holdout):
# - If crossvalidation, uses splited data from a list of files. Use paths to the
# files in the form /pathToFile/repeatedName#repeatedName, where # indicates 
# where the fold index is placed (a number from 0 to k-1). E.g. /home/iris-#.dat,
# with 3 folds in the path will look for iris-0.dat, iris-1.dat and iris-2.dat
# - If holdout, Use paths to the files in the form /pathToFile/repeatedName#repeatedName,
# where # is composed by the pattern (train|test)-i with i=0,1,...,n-1, where n is
# the number of experiment files. E.g. /home/iris-#.dat, with 4 files (2x(train+test))
# in the path will look for iris-train-0.dat, iris-test-0.dat, iris-train-1.dat and iris-test-1.dat
experiment.design = 
# Max depth allowed when building trees
tree.build.max.depth = 
# Min depth allowed when building trees
tree.min.depth = 
# Number of generations
evol.num.generation = 
# Number of experiment repetitions (per fold) - default = 1
experiment.num.repetition = 
# Population size
pop.size = 
# Size of the pool of random trees used by GSX/GSM
rt.pool.size = 
# Number of threads (for parallel execution)
evol.num.threads = 
# Tournament size, when using tournament as selector
pop.ind.selector.tourn.size = 
# Minimum error to consider a hit
evol.min.error = 
# Mutation step
breed.mut.step = 
# Indicate if the mutation step is absolute (false) or relative to the stardard deviation
# of the outputs of the training set.
breed.mut.step.sd = 
# List of breeders classes used during the evolution. The list items must be comma separated and the propability
# must follow the breeder class separated by a *. E.g.: 
# edu.gsgp.population.builder.individual.BreederA*0.1, edu.gsgp.population.builder.individual.BreederB*0.9
breed.list = 
# Population Initializer class. Default: edu.gsgp.population.builder.individual.SimplePopulator
pop.initializer = 
# Number of attemtps before adding an individual in the population
pop.initializer.attempts = 
