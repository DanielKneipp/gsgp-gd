# Path for the training/test files. See experiment.sampling option for more details
#experiment.data = /home/luiz/Dropbox/benchmark/particionado/reais/cpu-test-#.dat
experiment.data = /home/luiz/Dados/Trabalho/Pesquisa/Doutorado/Tese/dados/noise_test/noisy/airfoil/airfoil-test-#.dat-0.05
# Output directory
experiment.output.dir = /tmp/teste
# Path to a file with the list of seeds to use during iterations
experiment.seed = 123456
# Identifier prefix for files
experiment.file.prefix = saida
# List of terminals used to build new trees (separeted by commas)
tree.build.terminals = sgp.nodes.terminals.ERC
# List of functions used to build new trees (separeted by commas)
tree.build.functions = sgp.nodes.functions.AQ, sgp.nodes.functions.Sub, sgp.nodes.functions.Add, sgp.nodes.functions.Mul
# Builder used to generate trees for the initial population
tree.build.builder = RHH
# Builder used to generate random trees for the semantic operators
tree.build.builder.random.tree = GROW
# Type of selector used to select individuals for next generations
pop.ind.selector = TOURNAMENT
# Type of experiment (cross-validation or holdout):
# - If crossvalidation, uses splited data from a list of files. Use paths to the
# files in the form /pathToFile/repeatedName#repeatedName, where # indicates 
# where the fold index is placed (a number from 0 to k-1). E.g. /home/iris-#.dat,
# with 3 folds in the path will look for iris-0.dat, iris-1.dat and iris-2.dat
# - If holdout, Use paths to the files in the form /pathToFile/repeatedName#repeatedName,
# where # is composed by the pattern (train|test)-i with i=0,1,...,n-1, where n is
# the number of experiment files. E.g. /home/iris-#.dat, with 4 files (2x(train+test))
# in the path will look for iris-train-0.dat, iris-test-0.dat, iris-train-1.dat and iris-test-1.dat
experiment.design = crossvalidation
# Max depth allowed when building trees
tree.build.max.depth = 6
# Min depth allowed when building trees
tree.min.depth = 2
# Number of experiment repetitions (per fold) - default = 1
experiment.num.repetition = 1
# Population size
pop.size = 1000
# Number of generations
evol.num.generation = 50
# Tournament size, when using tournament as selector
pop.ind.selector.tourn.size = 10
# Number of threads (for parallel execution)
evol.num.threads = 6
# Minimum error to consider a hit
evol.min.error = 0
# Mutation step
breed.mut.step = -1
# Probability of applying the mutation operator
breed.mut.prob = 0.5
# Probability of applying the crossover operator
breed.xover.prob = 0.5
